#ifndef BOYERMOORE_H
#define BOYERMOORE_H

#include <stdio.h>

int BoyerMoore(char* Text, int TextSize, int Start, char* Pattern ,int PatternSize);

void BuildGST(char* Pattern, int PatternSize, int* Siuffix, int* GST);

int Max(int A, int B);


#include "BoyerMoore.h"
#include <stdlib.h>

int int BoyerMoore(char* Text, int TextSize, int Start, char* Pattern ,int PatternSize){
	int BafCharTable[128]; //나쁜 문자열 테이블
	int* GoodSuffTable = (int*)calloc(PatternSize+1, sizeof(int)); //착한 접미부 테이블
	int* PosOfBorder = (int*)calloc(PatternSize+1 , sizeof(int)); // 접미부의 가장 넓은 경계의 시작 위치
	int i = Start;
	int j=0;
	
	int Position=-1;
	
	BuildBST(Pattern, PatternSize, BadCharTable);
	BuildGST(Pattern, PatternSize, PosOfBorder, GoodSuffTable);
	
	while(i<=TextSize- PatternSize){
		j= PatternSize-1;
		
		while(j>=0 && Pattern[j] == Text[i+j])
			j--;
		if(j<0){
			Position =i;
			break;
		}
		else
		{
			i+= Max(GoodSuffTable[j+1] , j-BadCharTable[Text[i+j]]);
		}
	}
	
	free(PosOfBorder);
	free(GoodSuffTable);
	
	return Position;
	
}

void BuildBST(char* Pattern, int PatternSize, int* BadCharTable){
	int i;
	int j;
	
	for(i=0;i<128;i++)
		BadCharTable[i]=-1;
	
	for(j=0;j<PatternSize;j++)
		BadCharTable[Pattern[j]] =j;
}

void BuildGST(char* Pattern, int PatternSize, int* PosOfBorder, int* GoodSuffTable){
	//case1
	int i = PatternSize;
	int j = PatternSize+1;
	
	PosOfBorder[i] = j;
	
	while(i>0){
		while(j<=PatternSize && Pattern[i-1] != Pattern[j-1]){
			if(GoodSuffTable[j] == 0)
				GoodSuffTable[i] = j-i;
			j=PosOfBorder[j];
		}
		i--;
		j--;
		
		PosOfBorder[i] = j;
	}
	//case2
	j= PosOfBorder[0];
	
	for(i=0;i<=PatternSize;i++){
		if(GoodSuffTable[i]==0)
			GoodSuffTable[i]=j;
		
		if(i==j)
			j=PosOfBorder[j];
		
	}
	
}

int Max(int A, int B){
	if(A>B)
		return A;
	else
		return B;
}

#include <stdio.h>
#include <string.h>

#include "BoyerMoore.h"

#define MAX_BUFFER 512

int main(int argc, char** argv){
	char* FilePath;
	FILE* fp;
	
	char Text[MAX_BUFFER];
	char* Pattern;
	int PatternSize=0;
	int Line =0;
	
	if(argc<3){
		printf("Usage: %s <FilePath> <Pattern>\n",argv[0]);
		return 1;
	}
	
	FilePath = argv[1];
	Pattern = argv[2];
	
	PatternSize = strlen(Pattern);
	
	if((fp = fopen(FilePath,"r"))== NULL){
		printf("Cannot open file:%s\n", FilePath);
		return 1;
	}
	
	while(fgets(Text, MAX_BUFFER, fp )!= NULL){
		int Position = 
			BoyerMoore(Text, strlen(Text),0, Pattern, PatternSize);
		
		Line++;
		
		if(Position >=0){
			printf("line:%d, column:%d : %s", Line, Position+1, Text);
		}
	}
	fclose(fp);
	
	return 0;
}
