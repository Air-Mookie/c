
void PrintSolution(int Columns[], int NumberofQueens);
int IsThreatened(int Columns[], int NewRow);
void FindSolutionForQueen(int Columns[],int Row, int NumberofQueens, int* SolutionCount);


#include <stdio.h>
#include <stdlib.h>

void FindSolutionForQueen(int Columns[],int Row, int NumberofQueens, int * SolutionCount){
	if(IsThreatened(Columns,Row))
		return;
	if(Row == NumberofQueens - 1){
		printf("Solution #%d : \n",++(*SolutionCount));
		PrintSolution( Columns, NumberofQueens);
	}
	
	else{
		int i;
		for(i=0;i<NumberofQueens;i++){
			Columns[Row+1]=i;
			FindSolutionForQueen(Columns, Row+1, NumberofQueens,SolutionCount);
		}
	}
}

int IsThreatened(int Columns[], int NewRow){
	int CurrentRow =0;
	int Threatened =0;
	
	while(CurrentRow < NewRow){
		if(Columns[NewRow] == Columns[CurrentRow]
		  || abs(Columns[NewRow]-Columns[CurrentRow])
				==abs(NewRow - CurrentRow)){
			Threatened =1;
			break;
		}
		CurrentRow++;
	}
	return Threatened;
}

void PrintSolution(int Columns[],int NumberofQueens){
	int i=0;
	int j=0;
	for(i=0;i<NumberofQueens;i++){
		for(j=0;j<NumberofQueens;j++){
			if(Columns[i]==j)
				printf("Q");
			else
				printf(".");
		}
		printf("\n");
	}
	printf("\n");
}

int main(int argc, char* argv[]){
	int i=0;
	int NumberofQueens =0;
	int SolutionCount =0;
	int * Columns;
	
	if(argc<2){
		printf("Usage: %s <Number Of Queens>", argv[0]);
		return 1;
	}
	
	NumberofQueens = atoi(argv[1]);
	Columns = (int*)calloc(NumberofQueens, sizeof(int));
	
	for(i=0;i<NumberofQueens;i++){
		Columns[0] =i;
		FindSolutionForQueen(Columns, 0, NumberofQueens, &SolutionCount);
	}
	free(Columns);
	
	return 0;
	
}
